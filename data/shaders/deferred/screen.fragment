#version 410 core
out vec4 oColor;

in vec2 sTexCoord;

struct Lighting {
    float ambient;
    vec3 ambientTint;
    vec3 shadowTint;
    vec3 directionalTint;
    vec4 directional; // xyz -> location, w -> intensity
};

uniform Lighting uLighting;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gDiffuse;
uniform sampler2D gDepthColor;
uniform sampler2D gShadowDepth;
uniform sampler2D gPositionLightSpace;

uniform bool uDebug_ShowShadowMap;

float directionalLight(vec3 normal, vec4 light, float ambient, float mult) {
    return clamp(clamp(dot(normalize(light.xyz), normal), ambient, 1) * light.w * mult, 0, 1);
}

const float near = 0.1; 
const float far  = 100.0; 
  
float linearizeDepth(float depth)  {
    float z = depth;// * 2.0 - 1.0;
    return (2.0 * near * far) / (far + near - z * (far - near));	
}

const int sampleCount = 4;

float calculateShadow(vec4 fragPosLightSpace, vec3 normal, float mult) {
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    projCoords = projCoords * 0.5 + 0.5;
    if(projCoords.z > 1) return 1;
    // float closestDepth = texture(gShadowDepth, projCoords.xy).r;
    float currentDepth = projCoords.z;
    float bias = max(0.05 * (1.0 - dot(uLighting.directional.xyz, normal)), 0.005);

    float shadow = 0.0;
    vec2 texelSize = (1.0 / textureSize(gShadowDepth, 0));
    for(int x = -sampleCount/2; x <= sampleCount/2; ++x)
    {
        for(int y = -sampleCount/2; y <= sampleCount/2; ++y)
        {
            float pcfDepth = texture(gShadowDepth, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
        }    
    }
    shadow /= sampleCount * sampleCount;

    return clamp((1 - shadow) * mult, uLighting.ambient, 1); //currentDepth - bias > closestDepth ? uLighting.ambient : 1.0;
}

const float N = 4;

const float fogStart = 0.2;
const float fogEnd   = 1; 

void main() {
    // i have no idea why -sTexCoord...
    vec3 fragPos = texture(gPosition, -sTexCoord).xyz;
    vec4 fragPosLightSpace = texture(gPositionLightSpace, -sTexCoord);
    vec4 normalValue = texture(gNormal, -sTexCoord);
    vec3 normal = normalValue.xyz * 2 - 1;
    vec4 diffuse = texture(gDiffuse, -sTexCoord);
    float depth = texture(gDepthColor, -sTexCoord).r * 2 - 1;
    float shadowDepth = texture(gShadowDepth, -sTexCoord).r;

    // vec3 shadowColor = 1 - uLighting.directional.rgb;
    float shadowValue     = clamp(calculateShadow(fragPosLightSpace, normal, 1.0) * normalValue.w, 0, 1);
    float selfShadowValue = directionalLight(normal, uLighting.directional, uLighting.ambient, normalValue.w);
    float totalShadow = (shadowValue * selfShadowValue);

    float fogFactor = (depth - fogStart) / (fogEnd - fogStart);
    fogFactor = clamp(fogFactor, 0, 0.1);
    
    vec3 color = //vec3(depth);
        // ((1 - clamp(shadowValue * selfShadowValue, 0, 1)) - uLighting.directionalTint) *
        totalShadow * uLighting.directionalTint * diffuse.rgb;// * + vec3(fogFactor);
        //((1 - selfShadowValue) - uLighting.directionalTint);
    
    oColor = vec4(color, 1.0);
}
